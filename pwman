#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
# Simple password manager
# Copyright (c) 2011-2019 Michael Buesch <m@bues.ch>
# Licensed under the GNU/GPL version 2 or later.
"""

import argparse
import libpwman
import sys

def main():
	p = argparse.ArgumentParser()
	p.add_argument("commands", nargs="*", metavar="COMMAND",
		       help="Run this command. Starts in interactive mode, if no COMMAND is given.")
	p.add_argument("-d", "--database", type=str, default=None, metavar="PATH",
		       help="Use PATH as database file. If not given, %s is used." % (
			    libpwman.database.getDefaultDatabase()))
	p.add_argument("-U", "--commit-clear-undo", action="store_true",
		       help="The commit command clears undo queue.")
	p.add_argument("-t", "--timeout", type=int, default=600, metavar="SECONDS",
		       help="Sets the session timeout in seconds. Default is 10 minutes.")
	args = p.parse_args()

	dbFile = args.database
	if not dbFile:
		dbFile = libpwman.database.getDefaultDatabase()
	if not dbFile:
		print("No database file specified", file=sys.stderr)
		return 1
	dbExists = libpwman.util.fileExists(dbFile)
	if not args.commands: # not interactive mode
		if dbExists:
			print("Opening database '%s'..." % dbFile)
		else:
			print("Creating NEW database '%s'..." % dbFile)
	passphrase = libpwman.util.readPassphrase("Master passphrase", verify=not dbExists)
	if passphrase is None:
		return 1
	try:
		p = libpwman.PWMan(dbFile, passphrase,
				   commitClearsUndo=args.commit_clear_undo,
				   timeout=args.timeout)
		if args.commands:
			for command in args.commands:
				p.runOneCommand(command)
		else:
			p.interactive()
	except (libpwman.PWManError) as e:
		print("Error: " + str(e), file=sys.stderr)
		return 1
	except (libpwman.PWManTimeout) as e:
		libpwman.util.clearScreen()
		print("pwman session timeout after %d seconds of inactivity." % (
		      e.seconds), file=sys.stderr)
		p.flunkDirty()
		print("exiting...", file=sys.stderr)
		return 1
	return 0

if __name__ == "__main__":
	sys.exit(main())
