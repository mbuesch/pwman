#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
# Simple password manager
# Copyright (c) 2011-2019 Michael Buesch <m@bues.ch>
# Licensed under the GNU/GPL version 2 or later.
"""

import libpwman
import getopt
import sys


def usage():
	print("pwman v%d - lightweight password manager" % libpwman.VERSION)
	print("")
	print("Usage: %s [OPTIONS] [COMMANDS]" % sys.argv[0])
	print("")
	print("If COMMANDS are given, run these commands.")
	print("Starts in interactive mode, otherwise.")
	print("")
	print("Options:")
	print(" -d|--database PATH      Use PATH as database file.")
	print("                         If not given, %s is used." %\
					libpwman.database.getDefaultDatabase())
	print(" -U|--commit-clear-undo  The commit command clears undo queue.")
	print(" -t|--timeout SECONDS    Sets the session timeout. Default is 10 minutes.")

def main():
	dbFile = None
	commitClearsUndo = False
	timeout = 600
	try:
		(opts, args) = getopt.getopt(sys.argv[1:],
			"hd:Ut:",
			[ "help", "database=", "commit-clear-undo",
			  "timeout=", ])
		for (o, v) in opts:
			if o in ("-h", "--help"):
				usage()
				return 0
			if o in ("-d", "--database"):
				dbFile = v
			if o in ("-U", "--commit-clear-undo"):
				commitClearsUndo = True
			if o in ("-t", "--timeout"):
				timeout = int(v)
	except (getopt.GetoptError, ValueError) as e:
		usage()
		return 1
	commands = args
	if not dbFile:
		dbFile = libpwman.database.getDefaultDatabase()
	if not dbFile:
		print("No database file specified")
		return 1
	print("Opening database '%s'..." % dbFile)
	passphrase = libpwman.util.readPassphrase("Master passphrase",
				not libpwman.util.fileExists(dbFile))
	if passphrase is None:
		return 1
	try:
		p = libpwman.PWMan(dbFile, passphrase,
				   commitClearsUndo=commitClearsUndo,
				   timeout=timeout)
		if commands:
			for command in commands:
				p.runOneCommand(command)
		else:
			p.interactive()
	except (libpwman.PWManError) as e:
		print("Error: " + str(e))
		return 1
	except (libpwman.PWManTimeout) as e:
		libpwman.util.clearScreen()
		print("pwman session timeout after %d seconds of inactivity." % e.seconds)
		p.flunkDirty()
		print("exiting...")
		return 1
	return 0

if __name__ == "__main__":
	sys.exit(main())
